A “magic” command worth knowing,  is rake db:migrate:redo. It will undo and reapply the last migration.

SQLite 3 is the default database for Rails development and was installed along with Rails

Sites $ rails new depot

depot $ ls -F
Gemfile         README.rdoc     Rakefile        app/            bin/            config/         config.ru       db/             lib/            log/            public/         test/           tmp/            vendor/



So, let’s go ahead and create the model, views, controller, and migration for our products table. With Rails, you can do all that with one command by asking Rails to generate what is known as a *scaffold* for a given model. Note that on the command line2 that follows, we use the singular form, Product. In Rails, a model is automatically mapped to a database table whose name is the plural form of the model’s class. In our case, we asked for a model called Product, so Rails associated it with the table called products.

The development entry in config/database.yml tells Rails where to look for database. For SQLite 3 users, this will be a file in the *db*	 directory



depot $ rails generate scaffold  Product title:string description:text image_url:string price:decimal  #<<These are all DB fields
Ran into issues:
#Output


/var/lib/gems/1.9.1/gems/execjs-2.0.2/lib/execjs/runtimes.rb:51:in `autodetect': Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
        from /var/lib/gems/1.9.1/gems/execjs-2.0.2/lib/execjs.rb:5:in `<module:ExecJS>'
        from /var/lib/gems/1.9.1/gems/execjs-2.0.2/lib/execjs.rb:4:in `<top (required)>'
        from /var/lib/gems/1.9.1/gems/uglifier-2.3.1/lib/uglifier.rb:3:in `require'
        from /var/lib/gems/1.9.1/gems/uglifier-2.3.1/lib/uglifier.rb:3:in `<top (required)>'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:72:in `require'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:72:in `block (2 levels) in require'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:70:in `each'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:70:in `block in require'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:59:in `each'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/runtime.rb:59:in `require'
        from /var/lib/gems/1.9.1/gems/bundler-1.3.5/lib/bundler.rb:132:in `require'
        from /home/carneiro/Sites/depot/config/application.rb:7:in `<top (required)>'
        from /var/lib/gems/1.9.1/gems/railties-4.0.1/lib/rails/commands.rb:43:in `require'
        from /var/lib/gems/1.9.1/gems/railties-4.0.1/lib/rails/commands.rb:43:in `<top (required)>'
        from bin/rails:4:in `require'
        from bin/rails:4:in `<main>'

FIX
depot $ sudo apt-get install nodejs

depot $ rails generate scaffold  Product title:string description:text image_url:string price:decimal  #<<These are all DB fields
#Output
      invoke  active_record
      create    db/migrate/20131024185026_create_products.rb
      create    app/models/product.rb
      invoke    test_unit
      create      test/models/product_test.rb
      create      test/fixtures/products.yml
      invoke  resource_route
       route    resources :products
      invoke  scaffold_controller
      create    app/controllers/products_controller.rb
      invoke    erb
      create      app/views/products
      create      app/views/products/index.html.erb
      create      app/views/products/edit.html.erb
      create      app/views/products/show.html.erb
      create      app/views/products/new.html.erb
      create      app/views/products/_form.html.erb
      invoke    test_unit
      create      test/controllers/products_controller_test.rb
      invoke    helperhttp://localhost:3000/products/1
      create      app/helpers/products_helper.rb
      invoke      test_unit
      create        test/helpers/products_helper_test.rb
      invoke    jbuilder
      create      app/views/products/index.json.jbuilder
      create      app/views/products/show.json.jbuilder
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/products.js.coffee
      invoke    scss
      create      app/assets/stylesheets/products.css.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss

depot $ rails server

depot $ curl 'http://localhost:3000/products/new' # EntryPoint to add new products
depot $ curl 'http://localhost:3000/products/' #All products
depot $ curl 'http://localhost:3000/products/1' #Info for 1st product
depot $ curl 'http://localhost:3000/products/1/edit' # Edit first product



All form elements in 'products/new' comes from _form.html.erb
Modifying the text field to accomodate 6 rows by default.

depot $ vi app/views/products/_form.html.erb

<%= f.text_area :description, rows: 6 %>







depot $ cat app/views/products/_form.html.erb

<%= form_for(@product) do |f| %>
  <% if @product.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@product.errors.count, "error") %>
      prohibited this product from being saved:</h2>

      <ul>
      <% @product.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </div>
  <div class="field">
    <%= f.label :description %><br />
<!-- START_HIGHLIGHT -->
    <%= f.text_area :description, rows: 6 %>
<!-- END_HIGHLIGHT -->
  </div>
  <div class="field">
    <%= f.label :image_url %><br />
    <%= f.text_field :image_url %>
  </div>
  <div class="field">
    <%= f.label :price %><br />
    <%= f.text_field :price %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>



 It would be nice if we could load the data into our table in a more
controlled way. It turns out that we can. Rails has the ability to import seed
data.

To start, we simply modify the file in the db directory named seeds.rb.

We then add the code to populate the products table. This uses the create()
method of the Product model. The following is an extract from that file

depot $ cat db/seeds.rb
#Output
Product.delete_all
Product.create(title: 'CoffeeScript',
  description: 
    %{<p>
        CoffeeScript is JavaScript done right. It provides all of JavaScript's
        functionality wrapped in a cleaner, more succinct syntax. In the first
        book on this exciting new language, CoffeeScript guru Trevor Burnham
        shows you how to hold onto all the power and flexibility of JavaScript
        while writing clearer, cleaner, and safer code.
      </p>},
  image_url:   'cs.jpg',    
  price: 36.00)
# . . .
Product.create(title: 'Programming Ruby 1.9',
  description:
    %{<p>
        Ruby is the fastest growing and most exciting dynamic language
        out there. If you need to get working programs delivered fast,
        you should add Ruby to your toolbox.
      </p>},
  image_url: 'ruby.jpg',
  price: 49.95)
# . . .

Product.create(title: 'Rails Test Prescriptions',
  description: 
    %{<p>
        <em>Rails Test Prescriptions</em> is a comprehensive guide to testing
        Rails applications, covering Test-Driven Development from both a
        theoretical perspective (why to test) and from a practical perspective
        (how to test effectively). It covers the core Rails testing tools and
        procedures for Rails 2 and Rails 3, and introduces popular add-ons,
        including Cucumber, Shoulda, Machinist, Mocha, and Rcov.
      </p>},
  image_url: 'rtp.jpg',
  price: 34.95)


Changing Looks of the application



CSS: 
This file is responsible for giving styling to HTML for Products Controller at 'http://localhost:3000/products/'

~/Sites/depot/app/assets/stylesheets|⇒  cat >> products.css.scss       

                                                                                                                                                                    
// Place all the styles related to the Products controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: http://sass-lang.com/
/* START_HIGHLIGHT */
.products {
  table {
    border-collapse: collapse;
  }

  table tr td {
    padding: 5px;
    vertical-align: top;
  }

  .list_image {
    width:  60px;
    height: 70px;
  }

  .list_description {
    width: 60%;

    dl {
      margin: 0;
    }

    dt {
      color:        #244;
      font-weight:  bold;
      font-size:    larger;
    }

    dd {
      margin: 0;
    }
  }

  .list_actions {
    font-size:    x-small;
    text-align:   right;
    padding-left: 1em;
  }

  .list_line_even {
    background:   #e0f8f8;
  }
  .list_line_odd {
    background:   #f8b0f8;
  }
}
/* END_HIGHLIGHT */

Rails keeps a separate file that is used to create a standard page environment for the entire application. 
This file, called application.html.erb, is a Rails layout and lives in the layouts directory:
The above CSS wont be used until the body tag contains its own Controller CSS is not enabled using 'class' entity


~/Sites/depot/app/views/layouts|⇒    cat application.html.erb
<!DOCTYPE html>
<html>
<head>
  <title>Depot</title>
  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= csrf_meta_tags %>
</head>
<body class='<%= controller.controller_name %>'>

<%= yield %>

</body>
</html>


Because Rails loads all of the stylesheets all at once, we need a convention to limit controller-specific rules to pages associated with that controller. 
Using the controller_name as a class name is an easy way to accomplish that, and is what we have done here.


Now that we have the stylesheets all in place, we will use a simple table-based template, editing the file index.html.erb in app/views/products, replacing the scaffold-
generated view.

:~/Sites/depot/app/views/products|⇒  cat index.html.erb   
<h1>Listing products</h1>
<table>
    <% @products.each do |product| %>
        <tr class="<%= cycle('list_line_odd', 'list_line_even') %>">
            <td>
                <%= image_tag(product.image_url, class: 'list_image') %>
            </td>
            <td class="list_description">
                <dl>
                    <dt><%= product.title %></dt>
                    <dd><%= truncate(strip_tags(product.description),
                        length: 80) %></dd>
                    </dl>
                </td>
                <td class="list_actions">
                    <%= link_to 'Show', product %><br/>
                    <%= link_to 'Edit', edit_product_path(product) %><br/>
                    <%= link_to 'Destroy', product,
                    confirm: 'Are you sure?',
                    method: :delete %>
                </td>
            </tr>
        <% end %>
    </table>
    <br />
    <%= link_to 'New product', new_product_path %>

Even this simple template uses a number of built-in Rails features:

• The rows in the listing have alternating background colors. The Rails
helper method called cycle() does this by setting the CSS class of each row
to either list_line_even or list_line_odd, automatically toggling between the two
style names on successive lines.
• The truncate() helper is used to display just the first eighty characters of
the description. But before we call truncate(), we called strip_tags() in order
to remove the HTML tags from the description.
• Look at the link_to 'Destroy' line. See how it has the parameter confirm: 'Are you
sure?'. If you click this link, Rails arranges for your browser to pop up a
dialog box asking for confirmation before following the link and deleting
the product. (Delete here is HTTP DELETE method )


Downloading all image files for the application in app/assets/images folder

:~/Sites/depot/app/assets/images|⇒    wget http://media-origin.pragprog.com/titles/rails4/code/rails30/depot_b/public/images/rails.png
:~/Sites/depot/app/assets/images|⇒    wget http://media-origin.pragprog.com/titles/rails4/code/rails30/depot_b/public/images/ruby.png
:~/Sites/depot/app/assets/images|⇒    wget http://media-origin.pragprog.com/titles/rails4/code/rails30/depot_b/public/images/rtp.png




Adding Git for rollbacks

depot> git config --global --add user.name "Sam Ruby"
depot> git config --global --add user.email rubys@intertwingly.net

You can verify the configuration with the following command:
depot> git config --file .gitconfig --list


Rails also provides a file named .gitignore, which tells Git which files are not to be version controlled:

r:~/Sites/depot|master ⇒    cat .gitignore 
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp


depot> git init
depot> git add .
depot> git commit -m "Depot Scaffold"


Should you overwrite or delete a file that you didn’t mean to, you can always get back to this point by issuing a single
command:
depot> git checkout .

