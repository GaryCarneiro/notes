--ORM--

ORM libraries map database tables to classes. If a database has a table called orders, our program will have a class named Order. Rows in this table corresponds to objects of the class, a particular order is represented as an object of class Order. Within that object, attributes are used to get and set the individual columns. Our Order object has methods to get and set the amount, the sales tax, and so on.

Active Record is the ORM layer supplied with Rails. It closely follows the standard ORM model: 
	tables map to classes, 
	rows to objects, and 
	columns to object attributes.
	
	
--

#begin Code
	
require 'active_record'
class Order < ActiveRecord::Base
end
order = Order.find(1) order.pay_type = "Purchase order" order.save
#end Code

This code uses the new Order class to fetch the order with an id of 1 and modify the pay_type


Action Pack: The View and Controller
When you think about it, the view and controller parts of MVC are pretty intimate. The controller supplies data to the view, and the controller receives events from the pages generated by the views. Because of these interactions, support for views and controllers in Rails is bundled into a single component, Action Pack.


View
At its simplest, a view is a chunk of HTML code that displays some fixed text.

Controller
The Rails controller is the logical center of your application. It coordinates the interaction between the user, the views, and the model.

The controller is also home to a number of important ancillary services:
• It is responsible for routing external requests to internal actions. It handles people-friendly URLs extremely well.
• It manages caching, which can give applications orders-of-magnitude performance boosts.
• It manages helper modules, which extend the capabilities of the view templates without bulking up their code.
• It manages sessions, giving users the impression of ongoing interaction with our applications.	